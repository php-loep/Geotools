<?php namespace App\Geotools\Cache;

use Illuminate\Cache\Repository;
use League\Geotools\Batch\BatchGeocoded;
use League\Geotools\Cache\AbstractCache;
use League\Geotools\Cache\CacheInterface;
use League\Geotools\Cache\RuntimException;
/*
 * This file is part of the Geotools library.
 *
 * (c) Antoine Corcy <contact@sbin.dk>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
class LaravelCache extends AbstractCache implements CacheInterface
{
    /**
     * The expire value for keys.
     *
     * @var integer
     */
    protected $expire;
    /**
     * @var
     */
    private $cache;

    /**
     * LaravelCache constructor.
     * @param Store $cache
     * @param int $expire
     */
    public function __construct(Repository $cache, $expire = 0)
    {
        $this->cache = $cache;
        $this->expire = $expire;
    }


    /**
     * Return a unique key.
     *
     * @param string $providerName The name of the provider.
     * @param string $query The query string.
     *
     * @return string The unique key.
     */
    public function getKey($providerName, $query)
    {
        // TODO: Implement getKey() method.
        return md5($providerName . $query);
    }

    /**
     * Add into the cache.
     *
     * @param BatchGeocoded $geocoded The BatchGeocoded object to cache.
     *
     * @throws RuntimException
     */
    public function cache(BatchGeocoded $geocoded)
    {
        if($this->expire == 0 ) {
            $this->cache->forever(
                $this->getKey($geocoded->getProviderName(), $geocoded->getQuery()),
                $this->serialize($geocoded)
            );
        } else {
            $this->cache->put(
                $this->getKey($geocoded->getProviderName(), $geocoded->getQuery()),
                $this->serialize($geocoded),
                 Carbon::now()->addMinutes($this->expire)
            );
        }

    }

    /**
     * Check against the cache instance if any.
     *
     * @param string $providerName The name of the provider.
     * @param string $query The query string.
     *
     * @return boolean|BatchGeocoded The BatchGeocoded if cached false otherwise.
     */
    public function isCached($providerName, $query)
    {
        // TODO: Implement isCached() method.
        $key = $this->getKey($providerName, $query);
        if( ! $this->cache->has($key)){
                return false;
        }

        $cached = new BatchGeocoded();
        $cached->fromArray($this->deserialize($this->cache->get($key)));

        return $cached;

    }

    /**
     * Delete cached tuple.
     */
    public function flush()
    {
        $this->cache->flush();
    }

}
